Assignement name : n_queens

Expected files : *.c *.h

Allowed functions : atoi, fprintf, write

-------------------------------------------------------------------------

Write a program that will print all the solutions to the n queens problem
for a n given as argument.
We will not test with negative values.
The order of the solutions isnot important.
 
You will display the solutions under the following format :
<p1> <p2> <p3> ... \n
where pn are the line index of the queen in each colum starting from 0.

For example this should work :
$> ./n_queens 2 | cat -e

$> ./n_queens 4 | cat -e
1 3 0 2$
2 0 3 1$

$> ./n_queens 7 | cat -e
0 2 4 6 1 3 5$
0 3 6 2 5 1 4$
etc...




-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------






Assignment name  : n_queens
Expected files   : *.c *.h
Allowed functions: atoi, printf, write, malloc, calloc, realloc, free
--------------------------------------------------------------------------------

Write a program that will print the all the solutions to the n queens
problem for a n given as argument.

The N Queens problem is a classic puzzle that involves placing N queens on an N×N chessboard
in such a way that no queens threaten each other. Please refer to the files attached to this subject.

We will not test with negative values.
The order of the solutions is not important.

You will display the solutions under the following format:
<p1> <p2> <p3>...\n
where pn are the line index of the queen in each column starting from 0.
For instance, if you want to place your queens on the chess board like this:
0:  .  .  Q  .
1:  Q  .  .  .
2:  .  .  .  Q
3:  .  Q  .  .
you must provide the following output:
1 3 0 2

For example this should work:
$> ./n_queens 2 | cat -e
$> ./n_queens 4 | cat -e
1 3 0 2$
2 0 3 1$
$> ./n_queens 7 | cat -e
0 2 4 6 1 3 5$
0 3 6 2 5 1 4$
0 4 1 5 2 6 3$
0 5 3 1 6 4 2$
1 3 0 6 4 2 5$
1 3 5 0 2 4 6$
1 4 0 3 6 2 5$
1 4 2 0 6 3 5$
1 4 6 3 0 2 5$
1 5 2 6 3 0 4$
1 6 4 2 0 5 3$
2 0 5 1 4 6 3$
2 0 5 3 1 6 4$
2 4 6 1 3 5 0$
2 5 1 4 0 3 6$
2 6 1 3 5 0 4$
2 6 3 0 4 1 5$
3 0 2 5 1 6 4$
3 0 4 1 5 2 6$
3 1 6 4 2 0 5$
3 5 0 2 4 6 1$
3 6 2 5 1 4 0$
3 6 4 1 5 0 2$
4 0 3 6 2 5 1$
4 0 5 3 1 6 2$
4 1 5 2 6 3 0$
4 2 0 5 3 1 6$
4 6 1 3 5 0 2$
4 6 1 5 2 0 3$
5 0 2 4 6 1 3$
5 1 4 0 3 6 2$
5 2 0 3 6 4 1$
5 2 4 6 0 3 1$
5 2 6 3 0 4 1$
5 3 1 6 4 2 0$
5 3 6 0 2 4 1$
6 1 3 5 0 2 4$
6 2 5 1 4 0 3$
6 3 0 4 1 5 2$
6 4 2 0 5 3 1$
$>



// -----------------

Chess composer Max Bezzel published the eight queens puzzle in 1848. Franz
Nauck published the first solutions in 1850. Nauck also extended the puzzle to
the n queens problem, with n queens on a chessboard of nXn squares.

This is how Nauck describe the problem:

The Eight Queens Problem.
One of the classical problems connected with a chess-board is the determination
of the number of ways in which eight queens can be placed on a chess-board, or
more generally, in which n queens can be placed on a board of n² cells so that
no queen can take any other.

A chess board is an array of size 8x8 (in this exercise we consider boards of size nxn)
A queen is a piece which can be on any square of the board.
A queen can take another piece if that piece is on the same row, on the same column
or on the same 45 degrees diagonal line.

For example on the following board, the queen Q can take the pieces A, B or C but not D or E.

. . . . . . . .
. . C . . D . .
. . . . . . . .
. . Q . B . . .
. . . . . . . .
. . . . . . . .
. E . . . A . .
. . . . . . . .

-------------------------------------------------------------------------

(short ver)

Assignment name: n_queens
Expected files: *.c, *.h
Allowed functions: atoi, printf, write, malloc, calloc, relalloc, free

The N queens problem is a classic puzzle that invlolves placing N queen on an N * N chessboard in such a way tha no queens threated each other. Please refer to the files attached to this subject.

Write a program that will print all the solutions to the n queens problem for a n given as an argument. 
We will not test with negative values. 
The order of the solutions is not important. 
You will display the solutions under the following format:
<p1> <p2> <p3> ...\n
Where pn are the line index of the queen in each column starting from 0. For instance, if you want to place your queens like this:

0: x x Q x
1: Q x x x
2: x x x Q
3: x Q x x

You must provide the following output:
1302

./n_queens 2 | cat -e
./n_queens 4 | cat -e
1302$
2031$
./n_queens 7 | cat -e
0246135$
0362514$
0415263$
0531642$
1306425$
1350246$
1403625$
1420635$
1463025$
1526304$
1542036$
1603524$
1642035$
2053146$
2063145$
2413605$
2415306$
2513406$
2516304$
2530416$
2534610$
2536041$
2603415$
2630415$
3015264$
3142056$
3162045$
3410265$
3415206$
3514206$
3542061$
3602514$
3641502$
3651042$
4015263$
4152036$
4250136$
4253160$
4260315$
4265130$

------------------------------------------------------------------------------


Assignement name : n_queens

Expected files : *.c *.h

Allowed functions : atoi, fprintf, write

-------------------------------------------------------------------------

Write a program that will print all the solutions to the n queens problem
for a n given as argument.
We will not test with negative values.
The order of the solutions is not important.

You will display the solutions under the following format :
<p1> <p2> <p3> ... \n
where pn are the line index of the queen in each colum starting from 0.

For example this should work :
$> ./n_queens 2 | cat -e

$> ./n_queens 4 | cat -e
1 3 0 2$
2 0 3 1$

$> ./n_queens 7 | cat -e
0 2 4 6 1 3 5$
0 3 6 2 5 1 4$
etc...

NOTE: what is the N-queens problem? 
The N-Queens problem is a classic algorithmic puzzle in computer science and discrete mathematics. 
It asks: how can you place N chess queens on an N×N chessboard so that no two queens threaten each other? 
According to some sources, this means no two queens can share the same row, column, or diagonal. 
Here's a breakdown:
The Goal:
The objective is to find all possible configurations (or a single configuration) of queen placements that satisfy the constraint of no attacks. 
The Constraints:
Queens attack horizontally, vertically, and diagonally. 
Therefore, a valid solution requires that no two queens occupy the same row, column, or diagonal. 
Complexity:
The N-Queens problem is known to be NP-complete for the decision problem (whether a solution exists), and also for the problem of finding a single solution. 
Common Solutions:
Backtracking algorithms are frequently used to solve the N-Queens problem efficiently. 
The problem can be represented as a set of permutations of the numbers 1 to N, where each number represents the row of a queen in a given column. 
For example, for N=4, a solution might be represented as the permutation, which means: 
Column 1 has a queen in row 2.
Column 2 has a queen in row 4.
Column 3 has a queen in row 1.
Column 4 has a queen in row 3.
The N-Queens problem is a good example of how seemingly simple rules can lead to complex algorithmic challenges. 
It's also a problem with applications in areas like scheduling and resource allocation. 